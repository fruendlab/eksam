#!/usr/bin/env python
"""
Usage:
    eksam-cli [options] register <student-file>
    eksam-cli [options] statements <statement-file>
    eksam-cli [options] list-students
    eksam-cli [options] list-statements <chapter>
    eksam-cli [options] fetch <chapters> ...
    eksam-cli [options] test

Options:
    --host=<HOSTNAME>, -H <HOSTNAME>
        Location of eksam server. [Default: 127.0.0.1]
    --port=<PORT>, -P <PORT>
        Port of eksam server. [Default: 5000]
    --url=<URL>, -u <URL>
        Url of eksam web app.
    --secret=<APP_SECRET>, -s <APP_SECRET>
        Application secret for signing. [Default: EKSAM_SECRET] environment var
    --out=<OUTFILE>, -o <OUTFILE>
        Output file (only for fetch) [Default: grades.json]
"""

import os
import yaml
from itsdangerous import JSONWebSignatureSerializer
import requests
from docopt import docopt
from tempfile import TemporaryDirectory

TEST_STATEMENTS = '''
-
    text: '1 + 1 = 2'
    answer: True
    status: 'checked'
    chapter: 1
-
    text: '4 - 2 = 1'
    answer: False
    status: 'checked'
    chapter: 1
-
    text: '3 * 4 = 12'
    answer: True
    chapter: 1
-
    text: '3 * 4 = 14'
    answer: False
    chapter: 1
-
    text: '5 + 7 = 11'
    answer: False
    chapter: 2
-
    text: '9 - 3 + 1 = 8'
    answer: False
    status: 'checked'
    chapter: 2
-
    text: '9 * 2 - 5 = 13'
    answer: True
    status: 'checked'
    chapter: 2
-
    text: '7 + 5 * 3 - 13 = 9'
    answer: True
    chapter: 2
'''

TEST_STUDENTS = '''
- {id: '1234', accomodation: 1}
- {id: '1111', accomodation: 1}
- {id: '2222', accomodation: 1.5}
'''


def register_statements(api, fname, signer):
    with open(fname, 'r') as f:
        statements = yaml.load(f.read())
    payload = signer.dumps(statements)
    print(payload)
    requests.post(api+'/api/statements/', data=payload)


def register_students(api, fname, signer):
    with open(fname, 'r') as f:
        students = yaml.load(f.read())
    payload = signer.dumps(students)
    print(payload)
    requests.post(api+'/api/students/', data=payload)


def list_students(api, signer):
    print('Get students list!')
    r = requests.get(api+'/api/students/',
                     params={'token': signer.dumps('token')})
    if r.status_code == 200:
        print(yaml.dump(r.json(), width=50))


def list_statements(api, signer, chapter):
    print('Get statement list')
    r = requests.get(api+'/api/statements/{}/'.format(chapter),
                     params={'token': signer.dumps('token')})
    if r.status_code == 200:
        print(yaml.dump(r.json(), width=50))


def fetch(api, signer, chapters, outfile):
    r = requests.get(api+'/api/grades/',
                     params={'chapters': signer.dumps(chapters)})
    if r.status_code == 200:
        with open(outfile, 'w') as f:
            print('Writing to file {}'.format(outfile))
            f.write(r.text)


if __name__ == '__main__':
    args = docopt(__doc__)
    print(args)
    if args['--url']:
        url = 'http://' + args['--url']
    else:
        url = 'http://{}:{}'.format(args['--host'], args['--port'])
    signer = JSONWebSignatureSerializer(args['--secret'])

    if args['test']:
        with TemporaryDirectory() as tempdir:
            statements = os.path.join(tempdir, 'statements.yaml')
            students = os.path.join(tempdir, 'students.yaml')
            with open(statements, 'w') as f:
                f.write(TEST_STATEMENTS)
            with open(students, 'w') as f:
                f.write(TEST_STUDENTS)
            register_statements(url, statements, signer)
            register_students(url, students, signer)
    elif args['register']:
        register_students(url, args['<student-file>'], signer)
    elif args['statements']:
        register_statements(url, args['<statement-file>'], signer)
    elif args['list-students']:
        list_students(url, signer)
    elif args['list-statements']:
        list_statements(url, signer, args['<chapter>'])
    elif args['fetch']:
        fetch(url, signer, args['<chapters>'], args['--out'])
